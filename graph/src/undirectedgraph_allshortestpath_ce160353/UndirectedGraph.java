package undirectedgraph_allshortestpath_ce160353;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author CE160353 PhamThanhNghiem
 */
public class UndirectedGraph extends javax.swing.JFrame {

    private GPaper p = null;
    JFileChooser fileChooser;
    SimpleDateFormat sdfDate = new SimpleDateFormat("yyyyMMdd_HHmmss");

    public UndirectedGraph() {
        initComponents();

        //set icon for jframe
        this.setIconImage(getToolkit().getDefaultToolkit().getImage(getClass().getResource("/images/graph-icon.png")));

        //disable maximize button
        this.setResizable(false);
        // centering the frame
        this.setLocationRelativeTo(null);

        p = new GPaper();
        p.setTxtGraphInfo(txtGraphInfo);
        pnlPaper.setLayout(new BorderLayout());
        pnlPaper.add(p, BorderLayout.CENTER);

        fileChooser = new JFileChooser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        lbGuideLine = new javax.swing.JLabel();
        pnlGraphInfo = new javax.swing.JPanel();
        rdbMatrix = new javax.swing.JRadioButton();
        rdbList = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtGraphInfo = new javax.swing.JTextArea();
        pnlPaper = new javax.swing.JPanel();
        mnuMain = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniOpen = new javax.swing.JMenuItem();
        mnuSaveAs = new javax.swing.JMenu();
        mniSaveMatrix = new javax.swing.JMenuItem();
        mniSaveList = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mniExit = new javax.swing.JMenuItem();
        mnuGraph = new javax.swing.JMenu();
        mniClear = new javax.swing.JMenuItem();
        mniExprotPNG = new javax.swing.JMenuItem();
        mnuAlgorithm = new javax.swing.JMenu();
        mniFindShortestPath = new javax.swing.JMenuItem();
        mniFindminimumSpanningTree = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuTraversing = new javax.swing.JMenu();
        mniBFS = new javax.swing.JMenuItem();
        mniDFS = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Undirected Graph Demo v1");

        lbGuideLine.setText("<html> ##### Draws vertices ##### <br />  #1. Hold ctrl and click on space <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; to add new vertex. <br />  #2. Hold shift and click on the vertex that you <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; want to remove. <br />  #3. Drag and drop a vertex to move it. <br /><br />  ##### Draws edges ##### <br />  #1. Select start vertex <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (click it again to unselect). <br />  #2. Select destination vertex. <br />  #3. Input edge's value. <br />  #4. Click on value of the exist edge to update. </html>");

        pnlGraphInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("Graph Information"));

        buttonGroup1.add(rdbMatrix);
        rdbMatrix.setSelected(true);
        rdbMatrix.setText("Matrix");
        rdbMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbMatrixActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdbList);
        rdbList.setText("List");
        rdbList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbListActionPerformed(evt);
            }
        });

        txtGraphInfo.setEditable(false);
        txtGraphInfo.setColumns(20);
        txtGraphInfo.setRows(10);
        jScrollPane1.setViewportView(txtGraphInfo);

        javax.swing.GroupLayout pnlGraphInfoLayout = new javax.swing.GroupLayout(pnlGraphInfo);
        pnlGraphInfo.setLayout(pnlGraphInfoLayout);
        pnlGraphInfoLayout.setHorizontalGroup(
            pnlGraphInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGraphInfoLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(rdbMatrix)
                .addGap(35, 35, 35)
                .addComponent(rdbList)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        pnlGraphInfoLayout.setVerticalGroup(
            pnlGraphInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGraphInfoLayout.createSequentialGroup()
                .addGroup(pnlGraphInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbMatrix)
                    .addComponent(rdbList))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnlPaper.setBorder(javax.swing.BorderFactory.createTitledBorder("Draw graph yourselft"));

        javax.swing.GroupLayout pnlPaperLayout = new javax.swing.GroupLayout(pnlPaper);
        pnlPaper.setLayout(pnlPaperLayout);
        pnlPaperLayout.setHorizontalGroup(
            pnlPaperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 819, Short.MAX_VALUE)
        );
        pnlPaperLayout.setVerticalGroup(
            pnlPaperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        mnuFile.setMnemonic('F');
        mnuFile.setText("File");

        mniOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mniOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open.png"))); // NOI18N
        mniOpen.setMnemonic('O');
        mniOpen.setText("Open");
        mniOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenActionPerformed(evt);
            }
        });
        mnuFile.add(mniOpen);

        mnuSaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        mnuSaveAs.setMnemonic('S');
        mnuSaveAs.setText("Save as");

        mniSaveMatrix.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mniSaveMatrix.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/matrix.png"))); // NOI18N
        mniSaveMatrix.setText("Matrix");
        mniSaveMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveMatrixActionPerformed(evt);
            }
        });
        mnuSaveAs.add(mniSaveMatrix);

        mniSaveList.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mniSaveList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/list.png"))); // NOI18N
        mniSaveList.setMnemonic('L');
        mniSaveList.setText("List");
        mniSaveList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveListActionPerformed(evt);
            }
        });
        mnuSaveAs.add(mniSaveList);

        mnuFile.add(mnuSaveAs);
        mnuFile.add(jSeparator1);

        mniExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mniExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit.png"))); // NOI18N
        mniExit.setMnemonic('E');
        mniExit.setText("Exit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });
        mnuFile.add(mniExit);

        mnuMain.add(mnuFile);

        mnuGraph.setMnemonic('G');
        mnuGraph.setText("Graph");

        mniClear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, java.awt.event.InputEvent.CTRL_MASK));
        mniClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/clear.png"))); // NOI18N
        mniClear.setMnemonic('C');
        mniClear.setText("Clear");
        mniClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniClearActionPerformed(evt);
            }
        });
        mnuGraph.add(mniClear);

        mniExprotPNG.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        mniExprotPNG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/export.png"))); // NOI18N
        mniExprotPNG.setMnemonic('E');
        mniExprotPNG.setText("Export PNG");
        mniExprotPNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExprotPNGActionPerformed(evt);
            }
        });
        mnuGraph.add(mniExprotPNG);

        mnuMain.add(mnuGraph);

        mnuAlgorithm.setMnemonic('A');
        mnuAlgorithm.setText("Algorithm");

        mniFindShortestPath.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        mniFindShortestPath.setMnemonic('H');
        mniFindShortestPath.setText("Finds Shortest Path");
        mniFindShortestPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniFindShortestPathActionPerformed(evt);
            }
        });
        mnuAlgorithm.add(mniFindShortestPath);

        mniFindminimumSpanningTree.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        mniFindminimumSpanningTree.setMnemonic('M');
        mniFindminimumSpanningTree.setText("Finds Minimum Spanning Tree");
        mniFindminimumSpanningTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniFindminimumSpanningTreeActionPerformed(evt);
            }
        });
        mnuAlgorithm.add(mniFindminimumSpanningTree);
        mnuAlgorithm.add(jSeparator2);

        mnuTraversing.setMnemonic('T');
        mnuTraversing.setText("Traversing");

        mniBFS.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        mniBFS.setMnemonic('B');
        mniBFS.setText("BFS");
        mniBFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniBFSActionPerformed(evt);
            }
        });
        mnuTraversing.add(mniBFS);

        mniDFS.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        mniDFS.setMnemonic('D');
        mniDFS.setText("DFS");
        mniDFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDFSActionPerformed(evt);
            }
        });
        mnuTraversing.add(mniDFS);

        mnuAlgorithm.add(mnuTraversing);

        mnuMain.add(mnuAlgorithm);

        setJMenuBar(mnuMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlGraphInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbGuideLine))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPaper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbGuideLine, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlGraphInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pnlPaper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public File getSaveFile(FileNameExtensionFilter filter, String filename) {
        fileChooser.setFileFilter(filter);
        fileChooser.setSelectedFile(new File(filename));
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            if (fileChooser.getSelectedFile().exists()) {
                int response = JOptionPane.showConfirmDialog(null, "Do you want to replace the existing file?", "Confirm",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                if (response != JOptionPane.YES_OPTION) {
                    return null;
                }
            }
            return fileChooser.getSelectedFile();
        }
        return null;
    }

    private void mniFindminimumSpanningTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniFindminimumSpanningTreeActionPerformed
        // TODO add your handling code here:
        p.Prim();
    }//GEN-LAST:event_mniFindminimumSpanningTreeActionPerformed

    private void mniBFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniBFSActionPerformed
        // TODO add your handling code here:
        p.BFS();
    }//GEN-LAST:event_mniBFSActionPerformed

    private void mniExprotPNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExprotPNGActionPerformed
        // TODO add your handling code here:
        File saveFile = getSaveFile(new FileNameExtensionFilter("PNG image (*.png)", "png"),
                "export" + sdfDate.format(Calendar.getInstance().getTime()) + ".png");
        if (saveFile != null) {
            BufferedImage image = new BufferedImage(p.getWidth(), p.getHeight(), BufferedImage.TYPE_INT_RGB);
            Graphics2D g = image.createGraphics();
            p.printAll(g);

            g.setColor(Color.BLUE);
            g.drawString("PhamThanhNghiem  #CE160353 #SU22  #CSD201", 10, 20);

            g.dispose();
            try {
                ImageIO.write(image, "png", saveFile);
            } catch (IOException e) {
                System.err.println(e);
            }
        }

    }//GEN-LAST:event_mniExprotPNGActionPerformed

    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_mniExitActionPerformed

    private void rdbMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbMatrixActionPerformed
        // TODO add your handling code here:
        this.p.setGraphType(0);
    }//GEN-LAST:event_rdbMatrixActionPerformed

    private void rdbListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbListActionPerformed
        // TODO add your handling code here:
        this.p.setGraphType(1);
    }//GEN-LAST:event_rdbListActionPerformed

    private void mniClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniClearActionPerformed
        // TODO add your handling code here:
        this.p.clear();
    }//GEN-LAST:event_mniClearActionPerformed

    private void mniOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenActionPerformed
        // TODO add your handling code here:
        fileChooser.setFileFilter(new FileNameExtensionFilter("Graph data (*.mtx, *.lst)", "mtx", "lst"));
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            if (!fileChooser.getSelectedFile().exists()) {
                return;
            }
            File openFile = fileChooser.getSelectedFile();
            if (openFile.getName().endsWith(".mtx")) {
                p.readMatrixDataFile(openFile);
            } else if (openFile.getName().endsWith(".lst")) {
                p.readListDataFile(openFile);
            }
        }
    }//GEN-LAST:event_mniOpenActionPerformed

    private void mniSaveMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveMatrixActionPerformed
        // TODO add your handling code here:
        File saveFile = getSaveFile(new FileNameExtensionFilter("Draph date (*.mtx)", "mtx"),
                "graph_" + sdfDate.format(Calendar.getInstance().getTime()) + ".mtx");
        if (saveFile != null) {
            if (saveFile.getName().endsWith(".mtx")) {
                ArrayList<GVertex> vertices = p.getVertices();
                int[][] graph = p.getGraph();
                int numberOfVertex = p.getNumberOfVertices();
                FileWriter fw = null;
                String strData = "";
                String strXY = "";
                for (int i = 0; i < vertices.size(); i++) {
                    strXY += "\n" + vertices.get(i).getX() + " " + vertices.get(i).getY();
                }
                try {
                    strData += numberOfVertex;
                    strData += strXY;
                    for (int i = 0; i < numberOfVertex; i++) {
                        strData += "\n" + graph[i][0];
                        for (int j = 1; j < numberOfVertex; j++) {
                            strData += " " + graph[i][j];
                        }
                    }
                    fw = new FileWriter(saveFile);
                    fw.write(strData);
                    fw.flush();
                    fw.close();
                } catch (IOException e) {
                    System.err.println(e);
                } finally {
                    try {
                        fw.close();
                    } catch (IOException e) {
                        System.err.println(e);
                    }
                }
            }
        }
    }//GEN-LAST:event_mniSaveMatrixActionPerformed

    private void mniSaveListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveListActionPerformed
        // TODO add your handling code here:
        File saveFile = getSaveFile(new FileNameExtensionFilter("Draph date (*.lst)", "lst"),
                "graph_" + sdfDate.format(Calendar.getInstance().getTime()) + ".lst");
        if (saveFile != null) {
            if (saveFile.getName().endsWith(".lst")) {
                ArrayList<GVertex> vertices = p.getVertices();
                int[][] graph = p.getGraph();
                int numberOfVertex = p.getNumberOfVertices();
                FileWriter fw = null;
                String strData = "";
                String strXY = "";
                for (int i = 0; i < vertices.size(); i++) {
                    strXY += "\n" + vertices.get(i).getX() + " " + vertices.get(i).getY();
                }
                try {
                    int countEdge = 0;
                    for (int i = 0; i < numberOfVertex - 1; i++) {
                        for (int j = i + 1; j < numberOfVertex; j++) {
                            if (graph[i][j] > 0) {
                                strData += "\n" + i + " " + j + " " + graph[i][j];
                                ++countEdge;
                            }
                        }
                    }
                    strData = numberOfVertex + " " + countEdge + strXY + strData;
                    fw = new FileWriter(saveFile);
                    fw.write(strData);
                    fw.flush();
                    fw.close();
                } catch (IOException e) {
                    System.err.println(e);
                } finally {
                    try {
                        fw.close();
                    } catch (IOException e) {
                        System.err.println(e);
                    }
                }
            }
        }
    }//GEN-LAST:event_mniSaveListActionPerformed

    private void mniDFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDFSActionPerformed
        // TODO add your handling code here:
        p.DFS();
    }//GEN-LAST:event_mniDFSActionPerformed

    private void mniFindShortestPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniFindShortestPathActionPerformed
        // TODO add your handling code here:
        p.Dijkstra();
    }//GEN-LAST:event_mniFindShortestPathActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UndirectedGraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UndirectedGraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UndirectedGraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UndirectedGraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UndirectedGraph().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel lbGuideLine;
    private javax.swing.JMenuItem mniBFS;
    private javax.swing.JMenuItem mniClear;
    private javax.swing.JMenuItem mniDFS;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniExprotPNG;
    private javax.swing.JMenuItem mniFindShortestPath;
    private javax.swing.JMenuItem mniFindminimumSpanningTree;
    private javax.swing.JMenuItem mniOpen;
    private javax.swing.JMenuItem mniSaveList;
    private javax.swing.JMenuItem mniSaveMatrix;
    private javax.swing.JMenu mnuAlgorithm;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuGraph;
    private javax.swing.JMenuBar mnuMain;
    private javax.swing.JMenu mnuSaveAs;
    private javax.swing.JMenu mnuTraversing;
    private javax.swing.JPanel pnlGraphInfo;
    private javax.swing.JPanel pnlPaper;
    private javax.swing.JRadioButton rdbList;
    private javax.swing.JRadioButton rdbMatrix;
    private javax.swing.JTextArea txtGraphInfo;
    // End of variables declaration//GEN-END:variables
}
